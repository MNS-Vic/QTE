name: QTE Continuous Integration Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  MIN_COVERAGE_THRESHOLD: 90.0
  CORE_MODULES_COVERAGE_THRESHOLD: 93.0

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        pip install -r requirements.txt
    
    - name: Code formatting check (Black)
      run: black --check --diff .
    
    - name: Import sorting check (isort)
      run: isort --check-only --diff .
    
    - name: Linting (flake8)
      run: flake8 qte/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Type checking (mypy)
      run: mypy qte/ --ignore-missing-imports
    
    - name: Security analysis (bandit)
      run: bandit -r qte/ -f json -o bandit-report.json
    
    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Core Module Testing with Coverage
  core-testing:
    name: Core Modules Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-timeout
        pip install -r requirements.txt
    
    - name: Run core module tests with coverage
      run: |
        pytest tests/unit/core/ \
          --cov=qte.core \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=${{ env.CORE_MODULES_COVERAGE_THRESHOLD }} \
          --timeout=300 \
          --maxfail=5 \
          -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: core-modules
        name: core-coverage-${{ matrix.python-version }}
    
    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # Job 3: Full Test Suite Execution
  full-testing:
    name: Complete Test Suite
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-html
        pip install -r requirements.txt
    
    - name: Run complete test suite
      run: |
        pytest tests/ \
          --cov=qte \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=${{ env.MIN_COVERAGE_THRESHOLD }} \
          --html=test-report.html \
          --self-contained-html \
          --timeout=600 \
          --maxfail=10 \
          -n auto \
          -v
    
    - name: Generate coverage badge
      run: |
        coverage-badge -o coverage-badge.svg
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-report.html
          coverage.xml
          htmlcov/
          coverage-badge.svg

  # Job 4: Performance and Load Testing
  performance-testing:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [core-testing]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark memory-profiler
        pip install -r requirements.txt
    
    - name: Run performance benchmarks
      run: |
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=benchmark-results.json \
          --benchmark-histogram=benchmark-histogram \
          -v
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          benchmark-results.json
          benchmark-histogram.svg

  # Job 5: Integration Testing
  integration-testing:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [full-testing]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout docker-compose
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --timeout=900 \
          --maxfail=3 \
          -v
    
    - name: Upload integration test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-logs
        path: tests/integration/logs/

  # Job 6: Quality Gate Validation
  quality-gate:
    name: Quality Gate Validation
    runs-on: ubuntu-latest
    needs: [core-testing, full-testing, performance-testing]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download coverage reports
      uses: actions/download-artifact@v3
      with:
        name: test-results
    
    - name: Validate coverage thresholds
      run: |
        python scripts/validate_quality_gates.py \
          --coverage-file coverage.xml \
          --min-coverage ${{ env.MIN_COVERAGE_THRESHOLD }} \
          --core-coverage ${{ env.CORE_MODULES_COVERAGE_THRESHOLD }}
    
    - name: Generate quality report
      run: |
        python scripts/generate_quality_report.py \
          --output quality-gate-report.json
    
    - name: Upload quality gate report
      uses: actions/upload-artifact@v3
      with:
        name: quality-gate-report
        path: quality-gate-report.json

  # Job 7: Deployment Preparation (only on main branch)
  deployment-prep:
    name: Deployment Preparation
    runs-on: ubuntu-latest
    needs: [quality-gate, integration-testing]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build distribution packages
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Create deployment artifacts
      run: |
        mkdir -p deployment/
        cp dist/* deployment/
        cp -r qte/ deployment/
        cp requirements.txt deployment/
    
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment/

  # Job 8: Notification and Reporting
  notification:
    name: Build Notification
    runs-on: ubuntu-latest
    needs: [quality-gate, integration-testing, deployment-prep]
    if: always()
    
    steps:
    - name: Notify build status
      run: |
        echo "Build Status Summary:"
        echo "Quality Gate: ${{ needs.quality-gate.result }}"
        echo "Integration Tests: ${{ needs.integration-testing.result }}"
        echo "Deployment Prep: ${{ needs.deployment-prep.result }}"
        
        if [[ "${{ needs.quality-gate.result }}" == "success" && 
              "${{ needs.integration-testing.result }}" == "success" ]]; then
          echo "✅ All quality checks passed!"
        else
          echo "❌ Quality checks failed!"
          exit 1
        fi
