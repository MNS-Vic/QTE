---
description: 
globs: 
alwaysApply: true
---
# QTE项目开发规范与代码结构规范

## 一、项目目录结构规范

当前项目存在测试文件分散、命名不规范等问题，特制定以下规范。今后所有开发必须严格遵守。

```
QTE/
├── qte/                    # 核心源代码包
│   ├── core/               # 核心引擎模块
│   ├── data/               # 数据处理模块
│   │   └── sources/        # 数据源实现
│   ├── ml/                 # 机器学习模块
│   ├── portfolio/          # 投资组合管理
│   ├── execution/          # 执行模块
│   ├── analysis/           # 回测分析
│   └── utils/              # 工具函数
│
├── tests/                  # 所有测试代码（唯一测试目录）
│   ├── unit/               # 单元测试
│   │   ├── core/           # 核心模块测试
│   │   ├── data/           # 数据模块测试
│   │   └── ...
│   ├── integration/        # 集成测试
│   └── performance/        # 性能测试
│
├── examples/               # 示例代码
│   ├── simple_strategies/  # 简单策略示例
│   ├── ml_strategies/      # 机器学习策略示例
│   └── tutorials/          # 教程示例
│
├── docs/                   # 文档
│   ├── api/                # API文档
│   ├── tutorials/          # 教程文档
│   ├── architecture/       # 架构文档
│   └── development/        # 开发规范
│
├── data/                   # 测试数据（替代所有test_data）
│   ├── sample/             # 样本数据
│   ├── backtest/           # 回测数据
│   └── research/           # 研究数据
│
├── scripts/                # 工具脚本
│   ├── dev/                # 开发脚本
│   └── deploy/             # 部署脚本
│
├── results/                # 实验和回测结果
│   ├── figures/            # 图表和可视化
│   └── reports/            # 报告文件
│
├── .github/                # GitHub配置
│   └── workflows/          # CI/CD工作流
│
├── .venv/                  # 虚拟环境（不提交到版本控制）
├── .gitignore              # Git忽略配置
├── pyproject.toml          # 项目配置
├── setup.py                # 安装脚本
├── README.md               # 项目说明
└── CHANGELOG.md            # 变更日志
```

## 二、命名规范

### 1. 文件命名

- 源代码文件：全小写，下划线分隔，如 `vector_engine.py`
- 测试文件：前缀为 `test_`，如 `test_vector_engine.py`
- 示例文件：描述性名称，如 `simple_ma_strategy.py`

### 2. 类命名

- 使用驼峰命名法，如 `VectorEngine`
- 测试类以 `Test` 开头，如 `TestVectorEngine`

### 3. 函数和变量命名

- 使用小写，下划线分隔，如 `calculate_returns`
- 私有方法和变量前缀为单下划线，如 `_process_events`
- 常量全大写，如 `MAX_RETRY_COUNT`

## 三、测试规范

### 1. 测试目录结构

严格使用 `tests` 目录，禁止在其他位置创建测试文件：

```
tests/
├── unit/            # 单元测试（测试单个函数或类）
├── integration/     # 集成测试（测试多个组件的交互）
└── performance/     # 性能测试（测试性能指标）
```

### 2. 测试数据管理

- 所有测试数据统一放在 `data` 目录下
- 删除 `test_data`、`test` 中的数据文件
- 测试数据应有明确的版本控制策略

### 3. 测试命名

- 测试模块名：`test_<被测模块>.py`
- 测试类名：`Test<被测类>`
- 测试方法名：`test_<被测功能>_<测试场景>`

## 四、代码风格规范

### 1. Python风格

- 遵循PEP 8规范
- 使用类型注解
- 每个函数、类、模块都应有文档字符串

### 2. 注释规范

- 使用 NumPy/SciPy 风格的文档字符串
- 重要算法添加详细的实现说明
- 使用中文注释时确保编码一致性

### 3. 导入规范

```python
# 标准库导入
import os
import sys

# 第三方库导入
import numpy as np
import pandas as pd

# 项目内部导入
from qte.core import VectorEngine
from qte.data import DataSource
```



## 五、文档规范

### 1. 代码文档

- 每个模块、类、函数都应有文档字符串
- 复杂算法应附带理论解释和参考文献

### 2. 使用文档

- API文档：自动从代码生成
- 教程文档：实用的使用指南

## 、六部署规范

### 1. 依赖管理

- 使用pyproject.toml管理依赖
- 分离开发依赖和运行依赖
- 明确指定依赖版本

### 2. 环境管理

- 使用虚拟环境开发
- 提供环境配置脚本





- 架构文档：项目整体设计和关键决策六